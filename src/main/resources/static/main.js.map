{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/home/home.component.html","webpack:///./src/app/components/home/home.component.scss","webpack:///./src/app/components/home/home.component.ts","webpack:///./src/app/components/loading-overlay/loading-overlay.component.html","webpack:///./src/app/components/loading-overlay/loading-overlay.component.scss","webpack:///./src/app/components/loading-overlay/loading-overlay.component.ts","webpack:///./src/app/services/loading.service.ts","webpack:///./src/app/services/navbar.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;;;;;;;;;;;;;ACZyC;AACc;AACU;AAEjE,IAAM,MAAM,GAAW,CAAC;QACtB,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,6EAAa;KACzB,CAAC,CAAC;AAMH;IAAA;IAAgC,CAAC;IAApB,gBAAgB;QAJ5B,8DAAQ,CAAC;YACR,OAAO,EAAE,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACvC,OAAO,EAAE,CAAC,4DAAY,CAAC;SACxB,CAAC;OACW,gBAAgB,CAAI;IAAD,uBAAC;CAAA;AAAJ;;;;;;;;;;;;ACb7B,6DAA6D,aAAa,6CAA6C,6CAA6C,+H;;;;;;;;;;;ACApK,mB;;;;;;;;;;;;;;;;;;;;;;;;;;ACAkD;AACQ;AACE;AAO5D;IAEE,sBAAmB,aAA4B,EAC5B,cAA8B;QAD9B,kBAAa,GAAb,aAAa,CAAe;QAC5B,mBAAc,GAAd,cAAc,CAAgB;IAC/C,CAAC;IAKH,+BAAQ,GAAR;QAAA,iBAIC;QAFC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,SAAS,CAAC,eAAK,IAAI,YAAI,CAAC,WAAW,GAAG,KAAK,EAAxB,CAAwB,CAAC,CAAC;QACvE,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,SAAS,CAAC,qBAAW,IAAI,YAAI,CAAC,kBAAkB,GAAG,WAAW,EAArC,CAAqC,CAAC,CAAC;IAC/F,CAAC;IAbU,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,WAAW;;;SAGtB,CAAC;yCAGkC,sEAAa;YACZ,wEAAc;OAHtC,YAAY,CAcxB;IAAD,mBAAC;CAAA;AAdwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTiC;AACjB;AAEe;AACT;AACgC;AAQpD;AACsC;AACgC;AACzC;AAuBxD;IAAA;IAAyB,CAAC;IAAb,SAAS;QArBrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;gBACZ,6EAAa;gBACb,6GAAuB;aACxB;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,qEAAgB;gBAChB,oEAAgB;gBAChB,4FAAuB;gBACvB,+DAAa;gBACb,+DAAa;gBACb,kEAAgB;gBAChB,iEAAe;gBACf,+DAAa;gBACb,0EAAwB;aACzB;YACD,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;ACvCtB,qGAAqG,eAAe,yJAAyJ,wBAAwB,ka;;;;;;;;;;;ACArS,qCAAqC,uBAAuB,EAAE,iBAAiB,uBAAuB,iBAAiB,gBAAgB,EAAE,gBAAgB,iBAAiB,EAAE,G;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA1H;AAEY;AACE;AACd;AACT;AAQzC;IAEE,uBAAmB,aAA4B,EAC5B,cAA8B,EAC9B,UAAsB,EACtB,MAAc;QAHd,kBAAa,GAAb,aAAa,CAAe;QAC5B,mBAAc,GAAd,cAAc,CAAgB;QAC9B,eAAU,GAAV,UAAU,CAAY;QACtB,WAAM,GAAN,MAAM,CAAQ;IAC/B,CAAC;IAIH,gCAAQ,GAAR;QAEE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IAC1C,CAAC;IAEM,kCAAU,GAAjB;QAAA,iBAaC;QAXC,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC;QAElC,UAAU,CAAC;YACT,KAAI,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC;QACpC,CAAC,EAAE,IAAI,CAAC;QAER,0GAA0G;QAC1G,iEAAiE;QACjE,gBAAgB;QAChB,wBAAwB;QACxB,KAAK;IACP,CAAC;IA5BU,aAAa;QALzB,+DAAS,CAAC;YACT,QAAQ,EAAE,WAAW;;;SAGtB,CAAC;yCAGkC,sEAAa;YACZ,wEAAc;YAClB,+DAAU;YACd,sDAAM;OALtB,aAAa,CA6BzB;IAAD,oBAAC;CAAA;AA7ByB;;;;;;;;;;;;ACb1B,6F;;;;;;;;;;;ACAA,yBAAyB,gBAAgB,mBAAmB,oBAAoB,WAAW,YAAY,gBAAgB,iBAAiB,yCAAyC,EAAE,wBAAwB,oBAAoB,iBAAiB,gBAAgB,eAAe,iBAAiB,WAAW,YAAY,cAAc,aAAa,EAAE,G;;;;;;;;;;;;;;;;;;;;;;;;ACA3R;AAOzD;IAEE;IACE,CAAC;IAEH,0CAAQ,GAAR,cACE,CAAC;IANQ,uBAAuB;QALnC,+DAAS,CAAC;YACT,QAAQ,EAAE,sBAAsB;;;SAGjC,CAAC;;OACW,uBAAuB,CAOnC;IAAD,8BAAC;CAAA;AAPmC;;;;;;;;;;;;;;;;;;;;;;;;;;ACPO;AACA;AAK3C;IAEE;QAEE,IAAI,CAAC,cAAc,GAAG,IAAI,4CAAO,EAAW,CAAC;QAC7C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;IACrD,CAAC;IAKM,oCAAW,GAAlB;QAEE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IAEM,oCAAW,GAAlB;QAEE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAnBU,cAAc;QAH1B,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;;OACW,cAAc,CAoB1B;IAAD,qBAAC;CAAA;AApB0B;;;;;;;;;;;;;;;;;;;;;;;;;;ACNgB;AACA;AAK3C;IAEE;QAEE,IAAI,CAAC,YAAY,GAAG,IAAI,4CAAO,EAAU,CAAC;QAC1C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;IACjD,CAAC;IAKM,gCAAQ,GAAf,UAAgB,MAAc;QAE5B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACjC,CAAC;IAdU,aAAa;QAHzB,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;;OACW,aAAa,CAezB;IAAD,oBAAC;CAAA;AAfyB;;;;;;;;;;;;;;ACN1B;AAAA,gFAAgF;AAChF,2EAA2E;AAC3E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;GAKG;AACH,mEAAmE;;;;;;;;;;;;;;;;;;ACdpB;AAC4B;AAE9B;AACY;AAEzD,EAAE,CAAC,CAAC,qEAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,oEAAc,EAAE,CAAC;AACnB,CAAC;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomeComponent } from './components/home/home.component';\n\nconst routes: Routes = [{\n  path: \"\",\n  component: HomeComponent\n}];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"<mat-toolbar color=\\\"primary\\\">\\n  <span>{{NavbarTitle}}</span>\\n</mat-toolbar>\\n\\n<div [ngClass]=\\\"{'disable-pointer-events': ShowLoadingSpinner}\\\">\\n  <router-outlet></router-outlet>\\n</div>\\n\\n<nccp-loading-overlay *ngIf=\\\"ShowLoadingSpinner\\\"></nccp-loading-overlay>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport { NavbarService } from './services/navbar.service';\nimport { LoadingService } from './services/loading.service';\n\n@Component({\n  selector: 'nccp-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit\n{\n  constructor(public navbarService: NavbarService,\n              public loadingService: LoadingService)\n  { }\n\n  public NavbarTitle: string;\n  public ShowLoadingSpinner: boolean;\n\n  ngOnInit()\n  {\n    this.navbarService.Title$.subscribe(title => this.NavbarTitle = title);\n    this.loadingService.Loading$.subscribe(showLoading => this.ShowLoadingSpinner = showLoading);\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {\n  MatIconModule,\n  MatMenuModule,\n  MatToolbarModule,\n  MatButtonModule,\n  MatListModule,\n  MatProgressSpinnerModule\n} from '@angular/material';\nimport { HomeComponent } from './components/home/home.component';\nimport { LoadingOverlayComponent } from './components/loading-overlay/loading-overlay.component';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    LoadingOverlayComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatMenuModule,\n    MatIconModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatListModule,\n    MatProgressSpinnerModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"<!--My Lists-->\\n<mat-nav-list>\\n  <ng-container *ngIf=\\\"ShoppingLists?.length > 0; then hasLists; else doesNotHaveLists\\\"></ng-container>\\n\\n  <ng-template #hasLists>\\n    <a mat-list-item *ngFor=\\\"let shoppingList of ShoppingLists\\\">\\n      <span>{{shoppingList.CreatedOn}}</span>\\n      <mat-icon class=\\\"link-icon\\\">chevron_right</mat-icon>\\n    </a>\\n  </ng-template>\\n\\n  <ng-template #doesNotHaveLists>\\n    <mat-list-item>\\n      <span class=\\\"no-lists-message\\\">You do not have any lists</span>\\n    </mat-list-item>\\n  </ng-template>\\n\\n</mat-nav-list>\\n\\n<!--Add a new list-->\\n<button class=\\\"add-button\\\" mat-fab (click)=\\\"AddNewList()\\\">\\n  <mat-icon>add</mat-icon>\\n</button>\\n\"","module.exports = \".no-lists-message {\\n  font-style: italic; }\\n\\n.add-button {\\n  position: absolute;\\n  bottom: 10px;\\n  right: 10px; }\\n\\n.link-icon {\\n  float: right; }\\n\"","import { Component, OnInit } from '@angular/core';\nimport { ShoppingList } from '../../models/shopping-list';\nimport { NavbarService } from '../../services/navbar.service';\nimport { LoadingService } from '../../services/loading.service';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { CreateShoppingListResult } from '../../models/command-result/create-shopping-list-result';\n\n@Component({\n  selector: 'nccp-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit\n{\n  constructor(public navbarService: NavbarService,\n              public loadingService: LoadingService,\n              public httpClient: HttpClient,\n              public router: Router)\n  { }\n\n  public ShoppingLists: ShoppingList[];\n\n  ngOnInit()\n  {\n    this.navbarService.SetTitle(\"My Lists\");\n  }\n\n  public AddNewList()\n  {\n    this.loadingService.ShowOverlay();\n\n    setTimeout(() => {\n      this.loadingService.HideOverlay();\n    }, 3000)\n\n    // this.httpClient.post<CreateShoppingListResult>(\"/api/shopping-list/create\", {}).subscribe(response => {\n    //   this.router.navigate([\"shopping-list\", response.CreatedId]);\n    // }, error => {\n    //   console.log(error);\n    // })\n  }\n}\n","module.exports = \"<mat-spinner class=\\\"loading-indicator\\\" color=\\\"accent\\\"></mat-spinner>\\n\"","module.exports = \":host {\\n  content: '';\\n  display: block;\\n  position: fixed;\\n  top: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 100%;\\n  background-color: rgba(0, 0, 0, 0.3); }\\n\\n.loading-indicator {\\n  position: fixed;\\n  z-index: 999;\\n  height: 2em;\\n  width: 2em;\\n  margin: auto;\\n  top: 0;\\n  left: 0;\\n  bottom: 0;\\n  right: 0; }\\n\"","import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'nccp-loading-overlay',\n  templateUrl: './loading-overlay.component.html',\n  styleUrls: ['./loading-overlay.component.scss']\n})\nexport class LoadingOverlayComponent implements OnInit\n{\n  constructor()\n  { }\n\n  ngOnInit()\n  { }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoadingService\n{\n  constructor()\n  {\n    this.LoadingSource$ = new Subject<boolean>();\n    this.Loading$ = this.LoadingSource$.asObservable();\n  }\n\n  public Loading$: Observable<boolean>;\n  private LoadingSource$: Subject<boolean>;\n\n  public HideOverlay()\n  {\n    this.LoadingSource$.next(false);\n  }\n\n  public ShowOverlay()\n  {\n    this.LoadingSource$.next(true);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavbarService\n{\n  constructor()\n  {\n    this.TitleSource$ = new Subject<string>();\n    this.Title$ = this.TitleSource$.asObservable();\n  }\n\n  public Title$: Observable<string>;\n  private TitleSource$: Subject<string>;\n\n  public SetTitle(titleP: string)\n  {\n    this.TitleSource$.next(titleP);\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}